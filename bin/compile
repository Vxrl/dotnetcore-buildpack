#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

### Configure environment
set -o errexit    # always exit on error
set -o pipefail   # don't ignore exit codes when piping output
set -o nounset    # fail on unset variables
unset GIT_DIR     # Avoid GIT_DIR leak from previous build steps

if [ "$STACK" != "heroku-16" ]; then
	echo "Need heroku-16 stack (stack is $STACK)"
	exit 1
fi

### Configure directories
BUILD_DIR=${1:-}
CACHE_DIR=${2:-}
ENV_DIR=${3:-}
BP_DIR=$(cd $(dirname ${0:-}); cd ..; pwd)

mkdir -p $BUILD_DIR/.profile.d
cp $BP_DIR/profile/* $BUILD_DIR/.profile.d/

### Load dependencies
source $BP_DIR/lib/utils

export_env_dir $ENV_DIR
export DOTNET_SKIP_FIRST_TIME_EXPERIENCE=${DOTNET_SKIP_FIRST_TIME_EXPERIENCE:-1}
export DOTNET_CLI_TELEMETRY_OPTOUT=${DOTNET_CLI_TELEMETRY_OPTOUT:-1}

echo "Installing dependencies"
apt_install libunwind8 gettext

echo "Installing Google Chrome"
apt_install libxss1 libx11-xcb1 libxcomposite1 libxcursor1 libxdamage1 libxfixes3 libxi6 libxtst6 libnss3 libgconf-2-4 libxrandr2 libasound2 libatk1.0-0 libgtk2.0-0 libgtk-3-0 libxinerama1 libcairo-gobject2 https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb

echo "Creating Google Chrome shims"
CHROME_BIN_NAME=chrome/chrome
CHROME_SHIM_NAME=google-chrome-stable
BIN_DIR=$BUILD_DIR/.apt/usr/bin

rm $BIN_DIR/$CHROME_SHIM_NAME
cat <<EOF >$BIN_DIR/$CHROME_SHIM_NAME
#!/usr/bin/env bash
exec \$HOME/.apt/opt/google/$CHROME_BIN_NAME --headless --no-sandbox --disable-gpu --remote-debugging-port=9222 \$@
EOF
chmod +x $BIN_DIR/$CHROME_SHIM_NAME
cp $BIN_DIR/$CHROME_SHIM_NAME $BIN_DIR/google-chrome

cat <<EOF >$BUILD_DIR/.profile.d/010_google-chrome.sh
export GOOGLE_CHROME_BIN="\$HOME/.apt/opt/google/$CHROME_BIN_NAME"
export GOOGLE_CHROME_SHIM="\$HOME/.apt/usr/bin/$CHROME_SHIM_NAME"
EOF

echo "Installing .NET Core SDK"
install_dotnet $BUILD_DIR $CACHE_DIR

export PATH="/app/dotnet:${PATH}"
export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}"

cd $BUILD_DIR
dotnet --info

if [ -z ${PROJECT_FILE:-} ]; then
	PROJECT_FILE=$(x=$(dirname $(find ${BUILD_DIR} -maxdepth 5 -iname Startup.cs | head -1)); while [[ "$x" =~ $BUILD_DIR ]] ; do find "$x" -maxdepth 1 -name *.csproj; x=`dirname "$x"`; done)
fi

if [ -z ${PROJECT_NAME:-} ]; then
	PROJECT_NAME=$(basename ${PROJECT_FILE%.*})
fi

echo "Publishing ${PROJECT_FILE}"
dotnet publish $PROJECT_FILE --output bin/Publish --configuration Release --runtime linux-x64
